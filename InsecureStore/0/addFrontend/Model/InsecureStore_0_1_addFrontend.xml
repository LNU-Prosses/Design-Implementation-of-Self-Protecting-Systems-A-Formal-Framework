<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//architectures
const int t0=0;
const int t1=1;
int step=t0;

//automata types
const int CC=0;
const int BA=1;
const int CA=2;
const int CI=3;
const int II=4;
const int AI=5;
const int SD=6;


const int N=66;
const int SYSTEMDOWN_INSECUREDOCUMENTSTORE = 0;
const int SYSTEMCOMPROMISED_ACCOUNTMANAGER = 1;
const int INTEGRITYCOMPROMISED_ACCOUNTMANAGER = 2;
const int CANDELETEDOC_ACCOUNTMANAGER_0 = 3;
const int CANLEAKDOC_ACCOUNTMANAGER_0 = 4;
const int CANPRIVESC_ACCOUNTMANAGER_0 = 5;
const int CANINJECTCOMMAND_ACCOUNTMANAGER_0 = 6;
const int ISCOMPROMISED_ACCOUNTMANAGER_0_USERLOOKUP = 7;
const int ISCOMPROMISED_BACKEND_0_LOGIN = 8;
const int ISCOMPROMISED_FRONTEND0_0_CONNECT = 9;
const int ISCOMPROMISED_WEB_0_ENTRYPOINT = 10;
const int CANSPOOFUSR_ACCOUNTMANAGER_0 = 11;
const int CANDELETEDOC_ACCOUNTMANAGER_1 = 12;
const int CANLEAKDOC_ACCOUNTMANAGER_1 = 13;
const int CANPRIVESC_ACCOUNTMANAGER_1 = 14;
const int CANINJECTCOMMAND_ACCOUNTMANAGER_1 = 15;
const int ISCOMPROMISED_ACCOUNTMANAGER_1_USERLOOKUP = 16;
const int CANSPOOFUSR_ACCOUNTMANAGER_1 = 17;
const int CONFIDENTIALITYCOMPROMISED_ACCOUNTMANAGER = 18;
const int SYSTEMCOMPROMISED_BACKEND = 19;
const int INTEGRITYCOMPROMISED_BACKEND = 20;
const int CANDELETEDOC_BACKEND_0 = 21;
const int CANLEAKDOC_BACKEND_0 = 22;
const int CANPRIVESC_BACKEND_0 = 23;
const int CANINJECTCOMMAND_BACKEND_0 = 24;
const int CANSPOOFUSR_BACKEND_0 = 25;
const int CANDELETEDOC_BACKEND_1 = 26;
const int CANLEAKDOC_BACKEND_1 = 27;
const int CANPRIVESC_BACKEND_1 = 28;
const int CANINJECTCOMMAND_BACKEND_1 = 29;
const int ISCOMPROMISED_BACKEND_1_LOGIN = 30;
const int ISCOMPROMISED_FRONTEND0_1_CONNECT = 31;
const int ISCOMPROMISED_WEB_1_ENTRYPOINT = 32;
const int ISCOMPROMISED_FRONTEND1_1_CONNECT = 33;
const int CANSPOOFUSR_BACKEND_1 = 34;
const int CONFIDENTIALITYCOMPROMISED_BACKEND = 35;
const int SYSTEMCOMPROMISED_DATABASEMANAGER = 36;
const int INTEGRITYCOMPROMISED_DATABASEMANAGER = 37;
const int CANDELETEDOC_DATABASEMANAGER_0 = 38;
const int CANLEAKDOC_DATABASEMANAGER_0 = 39;
const int CANPRIVESC_DATABASEMANAGER_0 = 40;
const int CANINJECTCOMMAND_DATABASEMANAGER_0 = 41;
const int ISCOMPROMISED_DATABASEMANAGER_0_EXECUTEQUERY = 42;
const int ISCOMPROMISED_DOCUMENTMANAGER_0_DOCLOOKUP = 43;
const int CANSPOOFUSR_DATABASEMANAGER_0 = 44;
const int CANDELETEDOC_DATABASEMANAGER_1 = 45;
const int CANLEAKDOC_DATABASEMANAGER_1 = 46;
const int CANPRIVESC_DATABASEMANAGER_1 = 47;
const int CANINJECTCOMMAND_DATABASEMANAGER_1 = 48;
const int ISCOMPROMISED_DATABASEMANAGER_1_EXECUTEQUERY = 49;
const int ISCOMPROMISED_DOCUMENTMANAGER_1_DOCLOOKUP = 50;
const int CANSPOOFUSR_DATABASEMANAGER_1 = 51;
const int CONFIDENTIALITYCOMPROMISED_DATABASEMANAGER = 52;
const int SYSTEMCOMPROMISED_DOCUMENTMANAGER = 53;
const int INTEGRITYCOMPROMISED_DOCUMENTMANAGER = 54;
const int CANDELETEDOC_DOCUMENTMANAGER_0 = 55;
const int CANLEAKDOC_DOCUMENTMANAGER_0 = 56;
const int CANPRIVESC_DOCUMENTMANAGER_0 = 57;
const int CANINJECTCOMMAND_DOCUMENTMANAGER_0 = 58;
const int CANSPOOFUSR_DOCUMENTMANAGER_0 = 59;
const int CANDELETEDOC_DOCUMENTMANAGER_1 = 60;
const int CANLEAKDOC_DOCUMENTMANAGER_1 = 61;
const int CANPRIVESC_DOCUMENTMANAGER_1 = 62;
const int CANINJECTCOMMAND_DOCUMENTMANAGER_1 = 63;
const int CANSPOOFUSR_DOCUMENTMANAGER_1 = 64;
const int CONFIDENTIALITYCOMPROMISED_DOCUMENTMANAGER = 65;
bool achieved[N]={ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
const int num_methods=8;
broadcast chan methods[num_methods];
const int none=0;
const int userLookUp=1;
const int executeQuery=2;
const int entrypoint=3;
const int connect=4;
const int docLookUp=5;
const int login=6;
const int login2=7;
bool syn[num_methods]={
false,
true,
true,
false,
true,
true,
true,
true};
</declaration>
	<template>
		<name x="5" y="5">InternalBehaviour</name>
		<location id="id0" x="756" y="161">
			<name x="746" y="127">FE1</name>
			<label kind="exponentialrate" x="746" y="195">1</label>
		</location>
		<location id="id1" x="416" y="42">
			<name x="406" y="8">WEB</name>
			<label kind="exponentialrate" x="406" y="76">1</label>
		</location>
		<location id="id2" x="1673" y="42">
			<name x="1663" y="8">DB</name>
			<label kind="exponentialrate" x="1663" y="76">1</label>
		</location>
		<location id="id3" x="1427" y="42">
			<name x="1417" y="8">DBM</name>
			<label kind="exponentialrate" x="1417" y="76">1</label>
		</location>
		<location id="id4" x="1215" y="85">
			<name x="1198" y="51">DM</name>
			<label kind="exponentialrate" x="1205" y="119">1</label>
		</location>
		<location id="id5" x="1215" y="-9">
			<name x="1207" y="-43">AM</name>
			<label kind="exponentialrate" x="1205" y="25">1</label>
		</location>
		<location id="id6" x="1037" y="68">
			<name x="1027" y="34">BE</name>
			<label kind="exponentialrate" x="1027" y="102">1</label>
		</location>
		<location id="id7" x="748" y="17">
			<name x="738" y="-17">FE0</name>
			<label kind="exponentialrate" x="738" y="51">1</label>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="987" y="93">step==t1</label>
			<nail x="969" y="186"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="774" y="80">step==t1</label>
			<label kind="synchronisation" x="774" y="97">methods[login2]!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="570" y="127">step==t1</label>
			<nail x="552" y="161"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="569" y="102">step==t1</label>
			<label kind="synchronisation" x="544" y="68">methods[connect]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<nail x="569" y="-43"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="518" y="-77">methods[connect]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<nail x="918" y="-43"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="1053" y="42">methods[docLookUp]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="1028" y="-9">methods[userLookUp]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<nail x="1215" y="-103"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="1232" y="42">methods[executeQuery]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="1274" y="-17">methods[executeQuery]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="799" y="8">methods[login]!</label>
		</transition>
	</template>
	<template>
		<name>Rule</name>
		<parameter>const int this,const int P,const int method</parameter>
		<declaration>bool prerequisites(const int node){
if(node == INTEGRITYCOMPROMISED_DATABASEMANAGER){
return achieved[CANDELETEDOC_DATABASEMANAGER_3 ];
}
if(node == SYSTEMCOMPROMISED_DATABASEMANAGER){
return achieved[CONFIDENTIALITYCOMPROMISED_DATABASEMANAGER ];
}
if(node == CANDELETEDOC_BACKEND_3){
return achieved[CANLEAKDOC_BACKEND_3 ] &amp;&amp; achieved[CANSPOOFUSR_BACKEND_3 ];
}
if(node == CONFIDENTIALITYCOMPROMISED_BACKEND){
return achieved[CANLEAKDOC_BACKEND_3 ];
}
if(node == CANSPOOFUSR_BACKEND_2){
return achieved[CANPRIVESC_BACKEND_2 ];
}
if(node == CANINJECTCOMMAND_BACKEND_2){
return achieved[ISCOMPROMISED_BACKEND_2_LOGIN ];
}
if(node == CANDELETEDOC_DATABASEMANAGER_2){
return achieved[CANLEAKDOC_DATABASEMANAGER_2 ] &amp;&amp; achieved[CANSPOOFUSR_DATABASEMANAGER_2 ];
}
if(node == ISCOMPROMISED_DATABASEMANAGER_2_EXECUTEQUERY){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_FRONTEND1_3_CONNECT){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANINJECTCOMMAND_ACCOUNTMANAGER_3){
return achieved[ISCOMPROMISED_ACCOUNTMANAGER_3_USERLOOKUP ];
}
if(node == CANPRIVESC_DOCUMENTMANAGER_3){
return achieved[CANINJECTCOMMAND_DOCUMENTMANAGER_3 ];
}
if(node == ISCOMPROMISED_FRONTEND3_3_CONNECT){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANLEAKDOC_DOCUMENTMANAGER_3){
return achieved[CANPRIVESC_DOCUMENTMANAGER_3 ];
}
if(node == CONFIDENTIALITYCOMPROMISED_ACCOUNTMANAGER){
return achieved[CANLEAKDOC_ACCOUNTMANAGER_3 ];
}
if(node == CANDELETEDOC_ACCOUNTMANAGER_3){
return achieved[CANLEAKDOC_ACCOUNTMANAGER_3 ] &amp;&amp; achieved[CANSPOOFUSR_ACCOUNTMANAGER_3 ];
}
if(node == CANSPOOFUSR_ACCOUNTMANAGER_2){
return achieved[CANPRIVESC_ACCOUNTMANAGER_2 ];
}
if(node == CANSPOOFUSR_ACCOUNTMANAGER_3){
return achieved[CANPRIVESC_ACCOUNTMANAGER_3 ];
}
if(node == CANPRIVESC_ACCOUNTMANAGER_3){
return achieved[CANINJECTCOMMAND_ACCOUNTMANAGER_3 ];
}
if(node == CANLEAKDOC_ACCOUNTMANAGER_3){
return achieved[CANPRIVESC_ACCOUNTMANAGER_3 ];
}
if(node == CANDELETEDOC_DATABASEMANAGER_3){
return achieved[CANLEAKDOC_DATABASEMANAGER_3 ] &amp;&amp; achieved[CANSPOOFUSR_DATABASEMANAGER_3 ];
}
if(node == ISCOMPROMISED_WEB_2_ENTRYPOINT){
return  true;
}
if(node == ISCOMPROMISED_BACKEND_2_LOGIN){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == CANINJECTCOMMAND_DOCUMENTMANAGER_3){
return achieved[ISCOMPROMISED_DOCUMENTMANAGER_3_DOCLOOKUP ];
}
if(node == ISCOMPROMISED_FRONTEND0_2_CONNECT){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_FRONTEND2_2_CONNECT){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == CANINJECTCOMMAND_DOCUMENTMANAGER_2){
return achieved[ISCOMPROMISED_DOCUMENTMANAGER_2_DOCLOOKUP ];
}
if(node == SYSTEMDOWN_INSECUREDOCUMENTSTORE){
return achieved[SYSTEMCOMPROMISED_DOCUMENTMANAGER ];
}
if(node == INTEGRITYCOMPROMISED_BACKEND){
return achieved[CANDELETEDOC_BACKEND_3 ];
}
if(node == CONFIDENTIALITYCOMPROMISED_DOCUMENTMANAGER){
return achieved[CANLEAKDOC_DOCUMENTMANAGER_3 ];
}
if(node == SYSTEMCOMPROMISED_BACKEND){
return achieved[CONFIDENTIALITYCOMPROMISED_BACKEND ];
}
if(node == SYSTEMCOMPROMISED_ACCOUNTMANAGER){
return achieved[CONFIDENTIALITYCOMPROMISED_ACCOUNTMANAGER ];
}
if(node == CANSPOOFUSR_DATABASEMANAGER_3){
return achieved[CANPRIVESC_DATABASEMANAGER_3 ];
}
if(node == INTEGRITYCOMPROMISED_ACCOUNTMANAGER){
return achieved[CANDELETEDOC_ACCOUNTMANAGER_3 ];
}
if(node == CANDELETEDOC_ACCOUNTMANAGER_2){
return achieved[CANLEAKDOC_ACCOUNTMANAGER_2 ] &amp;&amp; achieved[CANSPOOFUSR_ACCOUNTMANAGER_2 ];
}
if(node == CANPRIVESC_BACKEND_2){
return achieved[CANINJECTCOMMAND_BACKEND_2 ];
}
if(node == CANLEAKDOC_BACKEND_2){
return achieved[CANPRIVESC_BACKEND_2 ];
}
if(node == CANLEAKDOC_BACKEND_3){
return achieved[CANPRIVESC_BACKEND_3 ];
}
if(node == CANPRIVESC_BACKEND_3){
return achieved[CANINJECTCOMMAND_BACKEND_3 ];
}
if(node == CANINJECTCOMMAND_BACKEND_3){
return achieved[ISCOMPROMISED_BACKEND_3_LOGIN ];
}
if(node == CANSPOOFUSR_BACKEND_3){
return achieved[CANPRIVESC_BACKEND_3 ];
}
if(node == CANDELETEDOC_BACKEND_2){
return achieved[CANLEAKDOC_BACKEND_2 ] &amp;&amp; achieved[CANSPOOFUSR_BACKEND_2 ];
}
if(node == CANSPOOFUSR_DOCUMENTMANAGER_3){
return achieved[CANPRIVESC_DOCUMENTMANAGER_3 ];
}
if(node == ISCOMPROMISED_DOCUMENTMANAGER_3_DOCLOOKUP){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANLEAKDOC_DOCUMENTMANAGER_2){
return achieved[CANPRIVESC_DOCUMENTMANAGER_2 ];
}
if(node == CANPRIVESC_DOCUMENTMANAGER_2){
return achieved[CANINJECTCOMMAND_DOCUMENTMANAGER_2 ];
}
if(node == CANSPOOFUSR_DOCUMENTMANAGER_2){
return achieved[CANPRIVESC_DOCUMENTMANAGER_2 ];
}
if(node == ISCOMPROMISED_FRONTEND2_3_CONNECT){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_DOCUMENTMANAGER_2_DOCLOOKUP){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_ACCOUNTMANAGER_3_USERLOOKUP){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_FRONTEND0_3_CONNECT){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANINJECTCOMMAND_DATABASEMANAGER_2){
return achieved[ISCOMPROMISED_DATABASEMANAGER_2_EXECUTEQUERY ];
}
if(node == CANPRIVESC_DATABASEMANAGER_2){
return achieved[CANINJECTCOMMAND_DATABASEMANAGER_2 ];
}
if(node == ISCOMPROMISED_WEB_3_ENTRYPOINT){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_BACKEND_3_LOGIN){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANLEAKDOC_ACCOUNTMANAGER_2){
return achieved[CANPRIVESC_ACCOUNTMANAGER_2 ];
}
if(node == CANLEAKDOC_DATABASEMANAGER_2){
return achieved[CANPRIVESC_DATABASEMANAGER_2 ];
}
if(node == CANPRIVESC_ACCOUNTMANAGER_2){
return achieved[CANINJECTCOMMAND_ACCOUNTMANAGER_2 ];
}
if(node == CANINJECTCOMMAND_ACCOUNTMANAGER_2){
return achieved[ISCOMPROMISED_ACCOUNTMANAGER_2_USERLOOKUP ];
}
if(node == ISCOMPROMISED_ACCOUNTMANAGER_2_USERLOOKUP){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == ISCOMPROMISED_FRONTEND1_2_CONNECT){
return achieved[ISCOMPROMISED_WEB_2_ENTRYPOINT ];
}
if(node == CANDELETEDOC_DOCUMENTMANAGER_2){
return achieved[CANLEAKDOC_DOCUMENTMANAGER_2 ] &amp;&amp; achieved[CANSPOOFUSR_DOCUMENTMANAGER_2 ];
}
if(node == CANINJECTCOMMAND_DATABASEMANAGER_3){
return achieved[ISCOMPROMISED_DATABASEMANAGER_3_EXECUTEQUERY ];
}
if(node == CONFIDENTIALITYCOMPROMISED_DATABASEMANAGER){
return achieved[CANLEAKDOC_DATABASEMANAGER_3 ];
}
if(node == ISCOMPROMISED_DATABASEMANAGER_3_EXECUTEQUERY){
return achieved[ISCOMPROMISED_WEB_3_ENTRYPOINT ];
}
if(node == CANDELETEDOC_DOCUMENTMANAGER_3){
return achieved[CANLEAKDOC_DOCUMENTMANAGER_3 ] &amp;&amp; achieved[CANSPOOFUSR_DOCUMENTMANAGER_3 ];
}
if(node == CANSPOOFUSR_DATABASEMANAGER_2){
return achieved[CANPRIVESC_DATABASEMANAGER_2 ];
}
if(node == SYSTEMCOMPROMISED_DOCUMENTMANAGER){
return achieved[CONFIDENTIALITYCOMPROMISED_DOCUMENTMANAGER ];
}
if(node == CANPRIVESC_DATABASEMANAGER_3){
return achieved[CANINJECTCOMMAND_DATABASEMANAGER_3 ];
}
if(node == INTEGRITYCOMPROMISED_DOCUMENTMANAGER){
return achieved[CANDELETEDOC_DOCUMENTMANAGER_3 ];
}
if(node == CANLEAKDOC_DATABASEMANAGER_3){
return achieved[CANPRIVESC_DATABASEMANAGER_3 ];
}
return false;
}
</declaration>
		<location id="id8" x="-144" y="-238">
			<label kind="exponentialrate" x="-154" y="-204">1</label>
		</location>
		<location id="id9" x="153" y="-238">
			<name x="143" y="-272">S</name>
			<label kind="exponentialrate" x="143" y="-204">1</label>
		</location>
		<location id="id10" x="-374" y="-238">
			<name x="-384" y="-272">I</name>
			<label kind="exponentialrate" x="-384" y="-204">1</label>
		</location>
		<branchpoint id="id11" x="42" y="-238">
		</branchpoint>
		<init ref="id10"/>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-340" y="-374">!syn[method]</label>
			<nail x="-289" y="-357"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="probability" x="-136" y="-195">100-P</label>
			<nail x="-136" y="-153"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="guard" x="-126" y="-272">prerequisites(this)</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-356" y="-272">syn[method]</label>
			<label kind="synchronisation" x="-356" y="-255">methods[method]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="assignment" x="60" y="-284">achieved[this]=true</label>
			<label kind="probability" x="76" y="-263">P</label>
		</transition>
	</template>
	<template>
		<name>NaiveAddFrontend</name>
		<location id="id12" x="-654" y="-187">
			<name x="-671" y="-221">T1</name>
		</location>
		<location id="id13" x="-654" y="-297">
			<name x="-664" y="-331">T0</name>
			<label kind="exponentialrate" x="-664" y="-263">1</label>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="assignment" x="-654" y="-255">step=t1</label>
		</transition>
	</template>
	<system>call_graph=InternalBehaviour();
tactic_tree=NaiveAddFrontend();


systemDown_insecureDocumentStore=Rule(SYSTEMDOWN_INSECUREDOCUMENTSTORE,96,none);
systemCompromised_accountManager=Rule(SYSTEMCOMPROMISED_ACCOUNTMANAGER,62,none);
integrityCompromised_accountManager=Rule(INTEGRITYCOMPROMISED_ACCOUNTMANAGER,29,none);
canDeleteDoc_accountManager_0=Rule(CANDELETEDOC_ACCOUNTMANAGER_0,23,none);
canLeakDoc_accountManager_0=Rule(CANLEAKDOC_ACCOUNTMANAGER_0,53,none);
canPrivEsc_accountManager_0=Rule(CANPRIVESC_ACCOUNTMANAGER_0,67,none);
canInjectCommand_accountManager_0=Rule(CANINJECTCOMMAND_ACCOUNTMANAGER_0,53,none);
isCompromised_accountManager_0_userLookUp=Rule(ISCOMPROMISED_ACCOUNTMANAGER_0_USERLOOKUP,66,userLookUp);
isCompromised_backend_0_login=Rule(ISCOMPROMISED_BACKEND_0_LOGIN,54,login);
isCompromised_frontend0_0_connect=Rule(ISCOMPROMISED_FRONTEND0_0_CONNECT,51,connect);
isCompromised_web_0_entrypoint=Rule(ISCOMPROMISED_WEB_0_ENTRYPOINT,80,entrypoint);
canSpoofUsr_accountManager_0=Rule(CANSPOOFUSR_ACCOUNTMANAGER_0,53,none);
canDeleteDoc_accountManager_1=Rule(CANDELETEDOC_ACCOUNTMANAGER_1,16,none);
canLeakDoc_accountManager_1=Rule(CANLEAKDOC_ACCOUNTMANAGER_1,45,none);
canPrivEsc_accountManager_1=Rule(CANPRIVESC_ACCOUNTMANAGER_1,56,none);
canInjectCommand_accountManager_1=Rule(CANINJECTCOMMAND_ACCOUNTMANAGER_1,42,none);
isCompromised_accountManager_1_userLookUp=Rule(ISCOMPROMISED_ACCOUNTMANAGER_1_USERLOOKUP,53,userLookUp);
canSpoofUsr_accountManager_1=Rule(CANSPOOFUSR_ACCOUNTMANAGER_1,45,none);
confidentialityCompromised_accountManager=Rule(CONFIDENTIALITYCOMPROMISED_ACCOUNTMANAGER,63,none);
systemCompromised_backend=Rule(SYSTEMCOMPROMISED_BACKEND,68,none);
integrityCompromised_backend=Rule(INTEGRITYCOMPROMISED_BACKEND,35,none);
canDeleteDoc_backend_0=Rule(CANDELETEDOC_BACKEND_0,17,none);
canLeakDoc_backend_0=Rule(CANLEAKDOC_BACKEND_0,46,none);
canPrivEsc_backend_0=Rule(CANPRIVESC_BACKEND_0,57,none);
canInjectCommand_backend_0=Rule(CANINJECTCOMMAND_BACKEND_0,43,none);
canSpoofUsr_backend_0=Rule(CANSPOOFUSR_BACKEND_0,46,none);
canDeleteDoc_backend_1=Rule(CANDELETEDOC_BACKEND_1,32,none);
canLeakDoc_backend_1=Rule(CANLEAKDOC_BACKEND_1,63,none);
canPrivEsc_backend_1=Rule(CANPRIVESC_BACKEND_1,79,none);
canInjectCommand_backend_1=Rule(CANINJECTCOMMAND_BACKEND_1,68,none);
isCompromised_backend_1_login=Rule(ISCOMPROMISED_BACKEND_1_LOGIN,85,login);
isCompromised_frontend0_1_connect=Rule(ISCOMPROMISED_FRONTEND0_1_CONNECT,65,connect);
isCompromised_web_1_entrypoint=Rule(ISCOMPROMISED_WEB_1_ENTRYPOINT,64,entrypoint);
isCompromised_frontend1_1_connect=Rule(ISCOMPROMISED_FRONTEND1_1_CONNECT,40,connect);
canSpoofUsr_backend_1=Rule(CANSPOOFUSR_BACKEND_1,63,none);
confidentialityCompromised_backend=Rule(CONFIDENTIALITYCOMPROMISED_BACKEND,69,none);
systemCompromised_databaseManager=Rule(SYSTEMCOMPROMISED_DATABASEMANAGER,78,none);
integrityCompromised_databaseManager=Rule(INTEGRITYCOMPROMISED_DATABASEMANAGER,50,none);
canDeleteDoc_databaseManager_0=Rule(CANDELETEDOC_DATABASEMANAGER_0,35,none);
canLeakDoc_databaseManager_0=Rule(CANLEAKDOC_DATABASEMANAGER_0,66,none);
canPrivEsc_databaseManager_0=Rule(CANPRIVESC_DATABASEMANAGER_0,83,none);
canInjectCommand_databaseManager_0=Rule(CANINJECTCOMMAND_DATABASEMANAGER_0,74,none);
isCompromised_databaseManager_0_executeQuery=Rule(ISCOMPROMISED_DATABASEMANAGER_0_EXECUTEQUERY,93,executeQuery);
isCompromised_documentManager_0_docLookUp=Rule(ISCOMPROMISED_DOCUMENTMANAGER_0_DOCLOOKUP,66,docLookUp);
canSpoofUsr_databaseManager_0=Rule(CANSPOOFUSR_DATABASEMANAGER_0,66,none);
canDeleteDoc_databaseManager_1=Rule(CANDELETEDOC_DATABASEMANAGER_1,38,none);
canLeakDoc_databaseManager_1=Rule(CANLEAKDOC_DATABASEMANAGER_1,69,none);
canPrivEsc_databaseManager_1=Rule(CANPRIVESC_DATABASEMANAGER_1,86,none);
canInjectCommand_databaseManager_1=Rule(CANINJECTCOMMAND_DATABASEMANAGER_1,78,none);
isCompromised_databaseManager_1_executeQuery=Rule(ISCOMPROMISED_DATABASEMANAGER_1_EXECUTEQUERY,98,executeQuery);
isCompromised_documentManager_1_docLookUp=Rule(ISCOMPROMISED_DOCUMENTMANAGER_1_DOCLOOKUP,92,docLookUp);
canSpoofUsr_databaseManager_1=Rule(CANSPOOFUSR_DATABASEMANAGER_1,69,none);
confidentialityCompromised_databaseManager=Rule(CONFIDENTIALITYCOMPROMISED_DATABASEMANAGER,79,none);
systemCompromised_documentManager=Rule(SYSTEMCOMPROMISED_DOCUMENTMANAGER,72,none);
integrityCompromised_documentManager=Rule(INTEGRITYCOMPROMISED_DOCUMENTMANAGER,41,none);
canDeleteDoc_documentManager_0=Rule(CANDELETEDOC_DOCUMENTMANAGER_0,23,none);
canLeakDoc_documentManager_0=Rule(CANLEAKDOC_DOCUMENTMANAGER_0,53,none);
canPrivEsc_documentManager_0=Rule(CANPRIVESC_DOCUMENTMANAGER_0,67,none);
canInjectCommand_documentManager_0=Rule(CANINJECTCOMMAND_DOCUMENTMANAGER_0,53,none);
canSpoofUsr_documentManager_0=Rule(CANSPOOFUSR_DOCUMENTMANAGER_0,53,none);
canDeleteDoc_documentManager_1=Rule(CANDELETEDOC_DOCUMENTMANAGER_1,35,none);
canLeakDoc_documentManager_1=Rule(CANLEAKDOC_DOCUMENTMANAGER_1,66,none);
canPrivEsc_documentManager_1=Rule(CANPRIVESC_DOCUMENTMANAGER_1,83,none);
canInjectCommand_documentManager_1=Rule(CANINJECTCOMMAND_DOCUMENTMANAGER_1,73,none);
canSpoofUsr_documentManager_1=Rule(CANSPOOFUSR_DOCUMENTMANAGER_1,66,none);
confidentialityCompromised_documentManager=Rule(CONFIDENTIALITYCOMPROMISED_DOCUMENTMANAGER,73,none);




system call_graph,tactic_tree, systemDown_insecureDocumentStore, systemCompromised_accountManager, integrityCompromised_accountManager, canDeleteDoc_accountManager_0, canLeakDoc_accountManager_0, canPrivEsc_accountManager_0, canInjectCommand_accountManager_0, isCompromised_accountManager_0_userLookUp, isCompromised_backend_0_login, isCompromised_frontend0_0_connect, isCompromised_web_0_entrypoint, canSpoofUsr_accountManager_0, canDeleteDoc_accountManager_1, canLeakDoc_accountManager_1, canPrivEsc_accountManager_1, canInjectCommand_accountManager_1, isCompromised_accountManager_1_userLookUp, canSpoofUsr_accountManager_1, confidentialityCompromised_accountManager, systemCompromised_backend, integrityCompromised_backend, canDeleteDoc_backend_0, canLeakDoc_backend_0, canPrivEsc_backend_0, canInjectCommand_backend_0, canSpoofUsr_backend_0, canDeleteDoc_backend_1, canLeakDoc_backend_1, canPrivEsc_backend_1, canInjectCommand_backend_1, isCompromised_backend_1_login, isCompromised_frontend0_1_connect, isCompromised_web_1_entrypoint, isCompromised_frontend1_1_connect, canSpoofUsr_backend_1, confidentialityCompromised_backend, systemCompromised_databaseManager, integrityCompromised_databaseManager, canDeleteDoc_databaseManager_0, canLeakDoc_databaseManager_0, canPrivEsc_databaseManager_0, canInjectCommand_databaseManager_0, isCompromised_databaseManager_0_executeQuery, isCompromised_documentManager_0_docLookUp, canSpoofUsr_databaseManager_0, canDeleteDoc_databaseManager_1, canLeakDoc_databaseManager_1, canPrivEsc_databaseManager_1, canInjectCommand_databaseManager_1, isCompromised_databaseManager_1_executeQuery, isCompromised_documentManager_1_docLookUp, canSpoofUsr_databaseManager_1, confidentialityCompromised_databaseManager, systemCompromised_documentManager, integrityCompromised_documentManager, canDeleteDoc_documentManager_0, canLeakDoc_documentManager_0, canPrivEsc_documentManager_0, canInjectCommand_documentManager_0, canSpoofUsr_documentManager_0, canDeleteDoc_documentManager_1, canLeakDoc_documentManager_1, canPrivEsc_documentManager_1, canInjectCommand_documentManager_1, canSpoofUsr_documentManager_1, confidentialityCompromised_documentManager; 
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=20](&lt;&gt; exists(i:int[0,N-1]) achieved[INTEGRITYCOMPROMISED_BACKEND]  ||  achieved[CONFIDENTIALITYCOMPROMISED_BACKEND] )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=20](&lt;&gt; achieved[SYSTEMCOMPROMISED_BACKEND])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>(exists(i:int[0,N-1]) achieved[i]) --&gt; achieved[SYSTEMDOWN_INSECUREDOCUMENTSTORE]
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=20](&lt;&gt;achieved[SYSTEMDOWN_INSECUREDOCUMENTSTORE])
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
